# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
def damages_to_float(damages_list):
  conversion = {"M": 1000000,
              "B": 1000000000}
  damages_float = []
  for i in range(len(damages_list)):
    if damages_list[i] == 'Damages not recorded':
      damages_float.append(damages_list[i])
    elif damages_list[i][-1] == 'M': 
      damages_float.append(float(damages_list[i][:-1]) * conversion['M'])
    elif damages_list[i][-1] == 'B': 
      damages_float.append(float(damages_list[i][:-1]) * conversion['B'])
  return damages_float  

# test function by updating damages
damages = damages_to_float(damages)


# 2 
# Create a Table
def huriTable():
  hDict = {}
  hList = []
  for i in range(len(names)):
    hDict[names[i]] = {"Name":names[i], "Month":months[i], "Year":years[i], "Max Sustained Wind":max_sustained_winds[i], "Areas Affected":areas_affected[i], "Damage":damages[i], "Death":deaths[i]}
    hList.append(hDict[names[i]])
  return hDict,hList


# Create and view the hurricanes dictionary
namesDict,dictList = huriTable()

# 3 [Doesn't show on tasks]
# Organizing by Year

    
# create a new dictionary of hurricanes with year and key

# 4
def namesToYearsDict(huriName):
  yearsD = {}
  for key,val in huriName.items():
    a = val["Year"]
    b=huriName[key]
    if a in yearsD.keys():
      l =[]
      l.append(yearsD[a])
      l.append(b)
      yearsD[a] = l
    else:
      yearsD[a] = b
  return yearsD

yearsDict = namesToYearsDict(namesDict)

# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in
def count_areas(areas_list):
  areas_count = {}
  areasArr = []
  for record in areas_list:
    for area in record:
      areasArr.append(area)
      areas_count[area]=areasArr.count(area)
  return areas_count

areasDict = count_areas(areas_affected)

# 5 
# Calculating Maximum Hurricane Count
def findMaxHits(areasD):
  maxHits = {"Area":"", "Number":0}
  for key,value in areasD.items():
    if value>maxHits["Number"]:
      maxHits.update({"Area":key, "Number":value})
  return maxHits

# find most frequently affected area and the number of hurricanes involved in
print(findMaxHits(areasDict))

# 6
# Calculating the Deadliest Hurricane
def findMaxD(baseDict):
  maxDDict = {"Area":"Death"}
  maxDVar = 0
  for key, value in baseDict.items():
    if value["Death"]>maxDVar:
      maxDVar = value["Death"]
      maxDDict.update({"Area":value["Areas Affected"],"Death":maxDVar})
  return maxDDict
print(findMaxD(namesDict))


# find highest mortality hurricane and the number of deaths

# 7
# Rating Hurricanes by Mortality

# categorize hurricanes in new dictionary with mortality severity as key

def mortalityScale(baseDict):
  mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}
  tempDict = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for key,value in baseDict.items():
    d = value["Death"]
    # 0
    if d==mortality_scale[0]:
      l = tempDict[0]
      l.append({key:value})
      tempDict.update({0:l})
    #1
    elif d>mortality_scale[0] and  d<=mortality_scale[1]:
      l = tempDict[1]
      l.append({key:value})
      tempDict.update({1:l})
    #2
    elif d>mortality_scale[1] and  d<=mortality_scale[2]:
      l = tempDict[2]
      l.append({key:value})
      tempDict.update({2:l})
    #3
    elif d>mortality_scale[2] and  d<=mortality_scale[3]:
      l = tempDict[3]
      l.append({key:value})
      tempDict.update({3:l})
    #4
    elif d>mortality_scale[3] and  d<=mortality_scale[4]:
      l = tempDict[4]
      l.append({key:value})
      tempDict.update({4:l})  
    #5
    elif d>mortality_scale[4]:
      l = tempDict[5]
      l.append({key:value})
      tempDict.update({5:l})
    else:
      print("Erron in data")
  return tempDict

mortalityScaleDict = mortalityScale(namesDict)

# 8 Calculating Hurricane Maximum Damage
def findHighestDamage(dictionary,toPrint = False):
  h = 0
  hItem = {}
  for key,value in dictionary.items():
    if (type(value["Damage"]) != str) and (value["Damage"] > h):
        h = value["Damage"]
        hItem = {key:value}
  #Print the message if got "True" as a second parameter:
  if toPrint:
    for key,value in hItem.items():
      x = int(value["Damage"])
      print("The highest damage was caused by Hurricane {}, with estimated damage of ${:,}".format(key,x))
  return hItem

# find highest damage inducing hurricane and its total cost
hiDamage = findHighestDamage(namesDict,True)

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def damageRating(dictionary):
  tempDict = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for key,value in dictionary.items():
    d = value["Damage"]
    l = []
    if type(d) == str:
      continue
    #0
    elif d==0:
      l = tempDict[0]
      l.append({key:value})
      tempDict.update({0:l})
    #1
    elif (d>damage_scale[0]) and (d<=damage_scale[1]):
      l = tempDict[1]
      l.append({key:value})
      tempDict.update({1:l})
    #2
    elif (d>damage_scale[1]) and (d<=damage_scale[2]):
      l = tempDict[2]
      l.append({key:value})
      tempDict.update({2:l})
    #3
    elif (d>damage_scale[2]) and (d<=damage_scale[3]):
      l = tempDict[3]
      l.append({key:value})
      tempDict.update({3:l})
    #4
    elif (d>damage_scale[3]) and (d<=damage_scale[4]):
      l = tempDict[4]
      l.append({key:value})
      tempDict.update({4:l})
    #5  
    elif d>damage_scale[4]:
      l = tempDict[5]
      l.append({key:value})
      tempDict.update({5:l})
  return tempDict

damageRatingDict = damageRating(namesDict)
#Testing:
#print(damageRatingDict)
#print(damageRatingDict[1][1]['Cuba II']['Damage'])
#d=list(damageRatingDict[1][1].keys())[0]
#print(damageRatingDict[1][1][d]["Damage"])
